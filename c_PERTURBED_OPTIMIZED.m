close all; clc;

fileCoeff = 'data/coeff_a_star';
dataCoefficients = load(fileCoeff, 'ax_star', 'ay_star');
ax = dataCoefficients.ax_star;
ay = dataCoefficients.ay_star;

%% GENERATION OF THE COEFFICIENT RELATED TO OPTIMAL TRAJECTORY
optimizMatrix = [ax, ay];

%% GENERATION OF THE COEFFICIENT RELATED TO DESIDERED TRAJECTORY
[coeffs, ~] = coeff_generation(totalTime, dx, dy);

%% Desired Trajectory Generation (Spline)
% Generate NON-OPTIMAL trajectory
[posNonOpt, velNonOpt, accNonOpt, thetaNonOpt] = trajectory_generation(coeffs, timeVec, totalTime, ...
    linewidth, colors, false);
%% GENERATE OPTIMIZED TRAJECTORY
[opt_traj, opt_vel, opt_acc, opt_theta] = trajectory_generation(optimizMatrix, timeVec, totalTime, ...
    linewidth, colors, false);

%% GENERATION OF OPTIMIZED TRAJECTORY WITH PERTURBED PARAMETERS
[q_OPT_PERT, u_OPT_PERT, xhi_OPT_PERT, e_OPT_PERT] = simulation_loop(initialPositionVec, initialVelocityVec, ...
    delta, ...
    nominal_params, perturbed_params, true, ...
    opt_traj, opt_vel, opt_acc, opt_theta);
%% GENERATION OF NOT-OPTIMIZED TRAJECTORY WITH PERTURBED PARAMETERS
[q_NOPT_PERT, u_NOPT_PERT, xhi_NOPT_PERT, e_NOPT_PERT] = simulation_loop(initialPositionVec, initialVelocityVec, ...
    delta, ...
    nominal_params, perturbed_params, true, ...
    posNonOpt, velNonOpt, accNonOpt, thetaNonOpt);
%% GENERATION OF NOT-OPTIMIZED TRAJECTORY WITH NOMINAL PARAMETERS
[q_NOPT_NOM, u_NOPT_NOM, xhi_NOPT_NOM, e_NOPT_NOM] = simulation_loop(initialPositionVec, initialVelocityVec, ...
    delta, ...
    nominal_params, perturbed_params, false, ...
    posNonOpt, velNonOpt, accNonOpt, thetaNonOpt);
%% GENERATION OF OPTIMIZED TRAJECTORY WITH NOMINAL PARAMETERS
[q_OPT_NOM, u_OPT_NOM, xhi_OPT_NOM, e_OPT_NOM] = simulation_loop(initialPositionVec, initialVelocityVec, ...
    delta, ...
    nominal_params, perturbed_params, false, ...
    opt_traj, opt_vel, opt_acc, opt_theta);

%% Plotting the errors
%Plot the errors in the non-optimal case, considering the perturbed parameters
plot_function(e_NOPT_PERT', 'Errors in the non-optimal case, considering the perturbed parameters', ...
    'e_NOPT_NOM_x[m];e_NOPT_NOM_y[m];e_NOPT_NOM_theta[rad];e_NOPT_NOM_tot[m]', ...
    'e_x nopt nominal;e_y nopt nominal; e_theta nopt nominal;e_tot nopt nominal', ...
    timeVec, linewidth, colors, counter)
%Plot the errors in the non-optimal case, considering the nominal parameters
plot_function(e_NOPT_NOM', 'Errors in the non-optimal case, considering the nominal parameters', ...
    'e_NOPT_PERT_x[m];e_NOPT_PERT_y[m];e_NOPT_PERT_theta[rad];e_NOPT_PERT_tot[m]', ...
    'e_x nopt perturbed;e_y nopt perturbed;e_theta nopt perturbed;e_tot nopt perturbed', ...
    timeVec, linewidth, colors, counter)
%Plot the errors in the optimal case, considering the perturbed parameters
plot_function(e_OPT_PERT', 'Errors in the optimal case, considering the perturbed parameters', ...
    'e_OPT_PERT_x[m];e_OPT_PERT_y[m];e_OPT_PERT_theta[rad];e_OPT_PERT_tot[m]', ...
    'e_x opt perturbed;e_y opt perturbed;e_theta opt perturbed;e_tot opt perturbed', ...
    timeVec, linewidth, colors, counter)
%Plot the errors in the optimal case, considering the nominal parameters
plot_function(e_OPT_NOM', 'Errors in the optimal case, considering the nominal parameters', ...
    'e_OPT_NOM_x[m];e_NOPT_NOM_y[m];e_NOPT_NOM_theta[rad];e_NOPT_NOM_tot[m]', ...
    'e_x nopt nominal;e_y nopt nominal;e_theta nopt nominal;e_tot nopt nominal', ...
    timeVec, linewidth, colors, counter)

%% Plot the comparison of the robot states in the optimal/non-optimal case with perturbed or nominal parameters
% Plot the comparison between the state evolution in the optimal and not optimal case, with the perturbed parameters
plot_function([q_NOPT_PERT', q_OPT_PERT'], 'Comparison between NOT OPTIMAL and OPTIMAL state evolution in the perturbed case', ...
    'x [m] ; y [m]; theta [rad]', ...
    'x nopt perturbed;y nopt perturbed;theta nopt perturbed;x opt perturbed;y opt perturbed;theta opt perturbed', ...
    timeVec, linewidth, colors, counter)
% Plot the comparison between the state evolution in the optimal and not optimal case with with the nominal parameters
plot_function([q_NOPT_NOM', q_OPT_NOM'], 'Comparison between NOT OPTIMAL and OPTIMAL state evolution in the nominal case', ...
    'x [m] ; y [m]; theta [rad]', ...
    'x nopt nominal;y nopt nominal;theta nopt nominal;x opt nominal;y opt nominal;theta opt nominal', ...
    timeVec, linewidth, colors, counter)

%% Calculating the error between the state evolution in the optimal and not optimal case, considering the perturbed or the nominal parameters
% Error between the state vectors with the perturbed and nominal parameters, in the optimal case.
e_OPT_PerturbedVSNominal = zeros(3, Nstep); eTot_OPT_PerturbedVSNominal = zeros(Nstep, 1);

for i = 1:Nstep
    e_OPT_PerturbedVSNominal(:, i) = q_OPT_PERT(:, i) - q_OPT_NOM(:, i);
    eTot_OPT_PerturbedVSNominal(i) = sqrt_of_quadratics(e_OPT_PerturbedVSNominal(:, i));
end

plot_function([e_OPT_PerturbedVSNominal; eTot_OPT_PerturbedVSNominal'], 'Error between the state vectors with the perturbed and nominal parameters, in the optimal case.', ...
    'error_x_OPT_PerturbedVsNominal[m]; error_y_OPT_PerturbedVsNominal[m]; error_theta_OPT_PerturbedVsNominal[m]; error_total_OPT_PerturbedVsNominal[m]', ...
    '', ...
    timeVec, linewidth, colors, counter)

% Error between the state vectors with the perturbed and nominal parameters, in the non-optimal case.
error_NOPT_PerturbedVSNominal = zeros(3, Nstep); eTot_NOPT_PerturbedVSNominal = zeros(Nstep, 1);

for i = 1:Nstep
    error_NOPT_PerturbedVSNominal(:, i) = q_NOPT_PERT(:, i) - q_NOPT_NOM(:, i);
    eTot_NOPT_PerturbedVSNominal(i) = sqrt_of_quadratics(error_NOPT_PerturbedVSNominal(:, i));
end

plot_function([error_NOPT_PerturbedVSNominal; eTot_NOPT_PerturbedVSNominal'], 'Error between the state vectors with the perturbed and nominal parameters, in the not-optimal case.', ...
    'error_x_NOPT_PerturbedVsNominal[m]; error_y_NOPT_PerturbedVsNominal[m]; error_theta_NOPT_PerturbedVsNominal[m]; error_total_NOPT_PerturbedVsNominal[m]', ...
    '', ...
    timeVec, linewidth, colors, counter)

% Error between the state vectors of the optimal and not-optimal trajectory, in the perturbed parameters.
error_Perturbed_NOPTvsOPT = zeros(3, Nstep); eTot_Perturbed_NOPTvsOPT = zeros(Nstep, 1);

for i = 1:Nstep
    error_Perturbed_NOPTvsOPT(:, i) = q_NOPT_PERT(:, i) - q_OPT_PERT(:, i);
    eTot_Perturbed_NOPTvsOPT(i) = sqrt_of_quadratics(error_Perturbed_NOPTvsOPT(:, i));
end

plot_function([error_Perturbed_NOPTvsOPT; eTot_Perturbed_NOPTvsOPT'], 'Error between the state vectors of the optimal and not-optimal trajectory, in the perturbed parameters', ...
    'error_x_Perturbed_NOPTvsOPT[m]; error_y_Perturbed_NOPTvsOPT[m]; error_theta_Perturbed_NOPTvsOPT[m]; error_total_Perturbed_NOPTvsOPT[m]', ...
    '', ...
    timeVec, linewidth, colors, counter)

% Error between the state vectors of the optimal and not-optimal trajectory, in the nominal parameters.
error_Nominal_NOPTvsOPT = zeros(3, Nstep); eTot_Nominal_NOPTvsOPT = zeros(Nstep, 1);

for i = 1:Nstep
    error_Nominal_NOPTvsOPT(:, i) = q_NOPT_NOM(:, i) - q_OPT_NOM(:, i);
    eTot_Nominal_NOPTvsOPT(i) = sqrt_of_quadratics(error_Nominal_NOPTvsOPT(:, i));
end

plot_function([error_Nominal_NOPTvsOPT; eTot_Nominal_NOPTvsOPT'], 'Error between the state vectors of the optimal and not-optimal trajectory, in the nominal parameters', ...
    'error_x_Nominal_NOPTvsOPT[m]; error_y_Nominal_NOPTvsOPT[m]; error_theta_Nominal_NOPTvsOPT[m]; error_total_Nominal_NOPTvsOPT[m]', ...
    '', ...
    timeVec, linewidth, colors, counter)

%% Create and display video animation and plots for the NON-Optimal trajectory.
% The video function just needs the distance between the wheels in order to plot the robot.
b_n = perturbed_params(2);
%video(q_history,r_d,b_n,timeVec,linewidth,delta, 'Non Optimized Trajectory Following')

%% Create and display video animation and plots for the NON-Optimal trajectory.
% The video function just needs the distance between the wheels in order to plot the robot.
b_n = perturbed_params(2);
%video(q_history,opt_traj,b_n,timeVec,linewidth,delta, 'Optimal Trajectory Following')
